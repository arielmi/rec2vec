# -*- coding: utf-8 -*-
"""make_list_of_ingredients.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wHHB7CBpiZ3ph_bVRyRnTVEmYYe5gSP6

## creates list of ingredients and also make space deliminator in the ingreds in the corpus to dash
"""

with open("/content/drive/My Drive/Final Project/train_ingredients.json", "r") as read_file:
    data = json.load(read_file)
train_ingredients = pd.read_json("/content/drive/My Drive/Final Project/train_ingredients.json")

with open("/content/drive/My Drive/Final Project/test_ingredients.json", "r") as read_file:
    data = json.load(read_file)
test_ingredients = pd.read_json("/content/drive/My Drive/Final Project/test_ingredients.json")

train_ingredients = train_ingredients["ingredients"]
test_ingredients = test_ingredients["ingredients"]
ingredients = train_ingredients.append(test_ingredients)
ingredients = pd.Series(list(chain.from_iterable(ingredients.tolist())))

# remove duplicates
ingredients = pd.Series(ingredients.unique())

# not cosider 'dash' or 'space' deleminator 
to_append1 = ingredients.str.replace("\s","-")
to_append2 = ingredients.str.replace("-","\s")
ingredients = ingredients.append(to_append1).append(to_append2)

# create 'single' ingredints (potatoes-->potatoe)
to_append3 = pd.Series(ingredients.str.replace("s{1}$",""))
to_append4 = pd.Series(ingredients.str.replace("es{1}$",""))
ingredients = ingredients.append(to_append3).append(to_append4)

# maybe our last process created duplicated values, remove them to reduce
# time of the further for-loop
ingredients = pd.Series(ingredients.unique())

"""remove if not in the corpus and unifie all more-than-one-word ingredients to be seprated by a dash in order word2vec read them as a one word"""

for ing in ingredients:
  
  # remove if not in the corpus
  if not corpus.str.contains(ing).any():
    ingredients = ingredients.drop(ingredients[ingredients=="eggs"].index)
  
  # unifie all more-than-one-word ingredients to be seprated by a dash 
  elif bool(re.match(".*\s.*",ing)):
    dashed = re.sub("\s","-",ing)
    ingredients = ingredients.str.replace(ing,dashed)
    corpus = corpus.str.replace(ing,dashed)

ingredients.to_csv("ingredients_of_corpus.csv")
corpus.to_csv("with_dash_corpus.csv")